/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.16
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// ReadVmsHealthResponse struct for ReadVmsHealthResponse
type ReadVmsHealthResponse struct {
	// Information about the health of one or more back-end VMs.
	BackendVmHealth *[]BackendVmHealth `json:"BackendVmHealth,omitempty"`
	ResponseContext *ResponseContext   `json:"ResponseContext,omitempty"`
}

// NewReadVmsHealthResponse instantiates a new ReadVmsHealthResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadVmsHealthResponse() *ReadVmsHealthResponse {
	this := ReadVmsHealthResponse{}
	return &this
}

// NewReadVmsHealthResponseWithDefaults instantiates a new ReadVmsHealthResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadVmsHealthResponseWithDefaults() *ReadVmsHealthResponse {
	this := ReadVmsHealthResponse{}
	return &this
}

// GetBackendVmHealth returns the BackendVmHealth field value if set, zero value otherwise.
func (o *ReadVmsHealthResponse) GetBackendVmHealth() []BackendVmHealth {
	if o == nil || o.BackendVmHealth == nil {
		var ret []BackendVmHealth
		return ret
	}
	return *o.BackendVmHealth
}

// GetBackendVmHealthOk returns a tuple with the BackendVmHealth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadVmsHealthResponse) GetBackendVmHealthOk() (*[]BackendVmHealth, bool) {
	if o == nil || o.BackendVmHealth == nil {
		return nil, false
	}
	return o.BackendVmHealth, true
}

// HasBackendVmHealth returns a boolean if a field has been set.
func (o *ReadVmsHealthResponse) HasBackendVmHealth() bool {
	if o != nil && o.BackendVmHealth != nil {
		return true
	}

	return false
}

// SetBackendVmHealth gets a reference to the given []BackendVmHealth and assigns it to the BackendVmHealth field.
func (o *ReadVmsHealthResponse) SetBackendVmHealth(v []BackendVmHealth) {
	o.BackendVmHealth = &v
}

// GetResponseContext returns the ResponseContext field value if set, zero value otherwise.
func (o *ReadVmsHealthResponse) GetResponseContext() ResponseContext {
	if o == nil || o.ResponseContext == nil {
		var ret ResponseContext
		return ret
	}
	return *o.ResponseContext
}

// GetResponseContextOk returns a tuple with the ResponseContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadVmsHealthResponse) GetResponseContextOk() (*ResponseContext, bool) {
	if o == nil || o.ResponseContext == nil {
		return nil, false
	}
	return o.ResponseContext, true
}

// HasResponseContext returns a boolean if a field has been set.
func (o *ReadVmsHealthResponse) HasResponseContext() bool {
	if o != nil && o.ResponseContext != nil {
		return true
	}

	return false
}

// SetResponseContext gets a reference to the given ResponseContext and assigns it to the ResponseContext field.
func (o *ReadVmsHealthResponse) SetResponseContext(v ResponseContext) {
	o.ResponseContext = &v
}

func (o ReadVmsHealthResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackendVmHealth != nil {
		toSerialize["BackendVmHealth"] = o.BackendVmHealth
	}
	if o.ResponseContext != nil {
		toSerialize["ResponseContext"] = o.ResponseContext
	}
	return json.Marshal(toSerialize)
}

type NullableReadVmsHealthResponse struct {
	value *ReadVmsHealthResponse
	isSet bool
}

func (v NullableReadVmsHealthResponse) Get() *ReadVmsHealthResponse {
	return v.value
}

func (v *NullableReadVmsHealthResponse) Set(val *ReadVmsHealthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReadVmsHealthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReadVmsHealthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadVmsHealthResponse(val *ReadVmsHealthResponse) *NullableReadVmsHealthResponse {
	return &NullableReadVmsHealthResponse{value: val, isSet: true}
}

func (v NullableReadVmsHealthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadVmsHealthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
