/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.16
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// ResourceTag Information about the tag.
type ResourceTag struct {
	// The key of the tag, with a minimum of 1 character.
	Key string `json:"Key"`
	// The value of the tag, between 0 and 255 characters.
	Value string `json:"Value"`
}

// NewResourceTag instantiates a new ResourceTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTag(key string, value string) *ResourceTag {
	this := ResourceTag{}
	this.Key = key
	this.Value = value
	return &this
}

// NewResourceTagWithDefaults instantiates a new ResourceTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTagWithDefaults() *ResourceTag {
	this := ResourceTag{}
	return &this
}

// GetKey returns the Key field value
func (o *ResourceTag) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ResourceTag) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ResourceTag) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *ResourceTag) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ResourceTag) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ResourceTag) SetValue(v string) {
	o.Value = v
}

func (o ResourceTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Key"] = o.Key
	}
	if true {
		toSerialize["Value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableResourceTag struct {
	value *ResourceTag
	isSet bool
}

func (v NullableResourceTag) Get() *ResourceTag {
	return v.value
}

func (v *NullableResourceTag) Set(val *ResourceTag) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTag) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTag(val *ResourceTag) *NullableResourceTag {
	return &NullableResourceTag{value: val, isSet: true}
}

func (v NullableResourceTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
