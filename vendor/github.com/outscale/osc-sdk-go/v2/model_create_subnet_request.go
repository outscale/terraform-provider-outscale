/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.16
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// CreateSubnetRequest struct for CreateSubnetRequest
type CreateSubnetRequest struct {
	// If true, checks whether you have the required permissions to perform the action.
	DryRun *bool `json:"DryRun,omitempty"`
	// The IP range in the Subnet, in CIDR notation (for example, 10.0.0.0/16).
	IpRange string `json:"IpRange"`
	// The ID of the Net for which you want to create a Subnet.
	NetId string `json:"NetId"`
	// The name of the Subregion in which you want to create the Subnet.
	SubregionName *string `json:"SubregionName,omitempty"`
}

// NewCreateSubnetRequest instantiates a new CreateSubnetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubnetRequest(ipRange string, netId string) *CreateSubnetRequest {
	this := CreateSubnetRequest{}
	this.IpRange = ipRange
	this.NetId = netId
	return &this
}

// NewCreateSubnetRequestWithDefaults instantiates a new CreateSubnetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubnetRequestWithDefaults() *CreateSubnetRequest {
	this := CreateSubnetRequest{}
	return &this
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *CreateSubnetRequest) GetDryRun() bool {
	if o == nil || o.DryRun == nil {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequest) GetDryRunOk() (*bool, bool) {
	if o == nil || o.DryRun == nil {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *CreateSubnetRequest) HasDryRun() bool {
	if o != nil && o.DryRun != nil {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *CreateSubnetRequest) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetIpRange returns the IpRange field value
func (o *CreateSubnetRequest) GetIpRange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpRange
}

// GetIpRangeOk returns a tuple with the IpRange field value
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequest) GetIpRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpRange, true
}

// SetIpRange sets field value
func (o *CreateSubnetRequest) SetIpRange(v string) {
	o.IpRange = v
}

// GetNetId returns the NetId field value
func (o *CreateSubnetRequest) GetNetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetId
}

// GetNetIdOk returns a tuple with the NetId field value
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequest) GetNetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetId, true
}

// SetNetId sets field value
func (o *CreateSubnetRequest) SetNetId(v string) {
	o.NetId = v
}

// GetSubregionName returns the SubregionName field value if set, zero value otherwise.
func (o *CreateSubnetRequest) GetSubregionName() string {
	if o == nil || o.SubregionName == nil {
		var ret string
		return ret
	}
	return *o.SubregionName
}

// GetSubregionNameOk returns a tuple with the SubregionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequest) GetSubregionNameOk() (*string, bool) {
	if o == nil || o.SubregionName == nil {
		return nil, false
	}
	return o.SubregionName, true
}

// HasSubregionName returns a boolean if a field has been set.
func (o *CreateSubnetRequest) HasSubregionName() bool {
	if o != nil && o.SubregionName != nil {
		return true
	}

	return false
}

// SetSubregionName gets a reference to the given string and assigns it to the SubregionName field.
func (o *CreateSubnetRequest) SetSubregionName(v string) {
	o.SubregionName = &v
}

func (o CreateSubnetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DryRun != nil {
		toSerialize["DryRun"] = o.DryRun
	}
	if true {
		toSerialize["IpRange"] = o.IpRange
	}
	if true {
		toSerialize["NetId"] = o.NetId
	}
	if o.SubregionName != nil {
		toSerialize["SubregionName"] = o.SubregionName
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSubnetRequest struct {
	value *CreateSubnetRequest
	isSet bool
}

func (v NullableCreateSubnetRequest) Get() *CreateSubnetRequest {
	return v.value
}

func (v *NullableCreateSubnetRequest) Set(val *CreateSubnetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubnetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubnetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubnetRequest(val *CreateSubnetRequest) *NullableCreateSubnetRequest {
	return &NullableCreateSubnetRequest{value: val, isSet: true}
}

func (v NullableCreateSubnetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubnetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
