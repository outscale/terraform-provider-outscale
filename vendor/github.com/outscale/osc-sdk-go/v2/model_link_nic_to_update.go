/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.16
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// LinkNicToUpdate Information about the NIC attachment. If you are modifying the `DeleteOnVmDeletion` attribute, you must specify the ID of the NIC attachment.
type LinkNicToUpdate struct {
	// By default or if set to false, the NIC is detached from the VM when the VM is terminated. If true, the NIC is deleted.
	DeleteOnVmDeletion *bool `json:"DeleteOnVmDeletion,omitempty"`
	// The ID of the NIC attachment.
	LinkNicId *string `json:"LinkNicId,omitempty"`
}

// NewLinkNicToUpdate instantiates a new LinkNicToUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkNicToUpdate() *LinkNicToUpdate {
	this := LinkNicToUpdate{}
	return &this
}

// NewLinkNicToUpdateWithDefaults instantiates a new LinkNicToUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkNicToUpdateWithDefaults() *LinkNicToUpdate {
	this := LinkNicToUpdate{}
	return &this
}

// GetDeleteOnVmDeletion returns the DeleteOnVmDeletion field value if set, zero value otherwise.
func (o *LinkNicToUpdate) GetDeleteOnVmDeletion() bool {
	if o == nil || o.DeleteOnVmDeletion == nil {
		var ret bool
		return ret
	}
	return *o.DeleteOnVmDeletion
}

// GetDeleteOnVmDeletionOk returns a tuple with the DeleteOnVmDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkNicToUpdate) GetDeleteOnVmDeletionOk() (*bool, bool) {
	if o == nil || o.DeleteOnVmDeletion == nil {
		return nil, false
	}
	return o.DeleteOnVmDeletion, true
}

// HasDeleteOnVmDeletion returns a boolean if a field has been set.
func (o *LinkNicToUpdate) HasDeleteOnVmDeletion() bool {
	if o != nil && o.DeleteOnVmDeletion != nil {
		return true
	}

	return false
}

// SetDeleteOnVmDeletion gets a reference to the given bool and assigns it to the DeleteOnVmDeletion field.
func (o *LinkNicToUpdate) SetDeleteOnVmDeletion(v bool) {
	o.DeleteOnVmDeletion = &v
}

// GetLinkNicId returns the LinkNicId field value if set, zero value otherwise.
func (o *LinkNicToUpdate) GetLinkNicId() string {
	if o == nil || o.LinkNicId == nil {
		var ret string
		return ret
	}
	return *o.LinkNicId
}

// GetLinkNicIdOk returns a tuple with the LinkNicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkNicToUpdate) GetLinkNicIdOk() (*string, bool) {
	if o == nil || o.LinkNicId == nil {
		return nil, false
	}
	return o.LinkNicId, true
}

// HasLinkNicId returns a boolean if a field has been set.
func (o *LinkNicToUpdate) HasLinkNicId() bool {
	if o != nil && o.LinkNicId != nil {
		return true
	}

	return false
}

// SetLinkNicId gets a reference to the given string and assigns it to the LinkNicId field.
func (o *LinkNicToUpdate) SetLinkNicId(v string) {
	o.LinkNicId = &v
}

func (o LinkNicToUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteOnVmDeletion != nil {
		toSerialize["DeleteOnVmDeletion"] = o.DeleteOnVmDeletion
	}
	if o.LinkNicId != nil {
		toSerialize["LinkNicId"] = o.LinkNicId
	}
	return json.Marshal(toSerialize)
}

type NullableLinkNicToUpdate struct {
	value *LinkNicToUpdate
	isSet bool
}

func (v NullableLinkNicToUpdate) Get() *LinkNicToUpdate {
	return v.value
}

func (v *NullableLinkNicToUpdate) Set(val *LinkNicToUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkNicToUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkNicToUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkNicToUpdate(val *LinkNicToUpdate) *NullableLinkNicToUpdate {
	return &NullableLinkNicToUpdate{value: val, isSet: true}
}

func (v NullableLinkNicToUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkNicToUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
