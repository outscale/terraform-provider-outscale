/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://wiki.outscale.net/display/EN/3DS+OUTSCALE+APIs+Reference).<br /><br />  You can also manage your resources using the [Cockpit](https://wiki.outscale.net/display/EN/About+Cockpit) web interface.
 *
 * API version: 1.16
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// FiltersAccessKeys One or more filters.
type FiltersAccessKeys struct {
	// The IDs of the access keys.
	AccessKeyIds *[]string `json:"AccessKeyIds,omitempty"`
	// The states of the access keys (`ACTIVE` \\| `INACTIVE`).
	States *[]string `json:"States,omitempty"`
}

// NewFiltersAccessKeys instantiates a new FiltersAccessKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltersAccessKeys() *FiltersAccessKeys {
	this := FiltersAccessKeys{}
	return &this
}

// NewFiltersAccessKeysWithDefaults instantiates a new FiltersAccessKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersAccessKeysWithDefaults() *FiltersAccessKeys {
	this := FiltersAccessKeys{}
	return &this
}

// GetAccessKeyIds returns the AccessKeyIds field value if set, zero value otherwise.
func (o *FiltersAccessKeys) GetAccessKeyIds() []string {
	if o == nil || o.AccessKeyIds == nil {
		var ret []string
		return ret
	}
	return *o.AccessKeyIds
}

// GetAccessKeyIdsOk returns a tuple with the AccessKeyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersAccessKeys) GetAccessKeyIdsOk() (*[]string, bool) {
	if o == nil || o.AccessKeyIds == nil {
		return nil, false
	}
	return o.AccessKeyIds, true
}

// HasAccessKeyIds returns a boolean if a field has been set.
func (o *FiltersAccessKeys) HasAccessKeyIds() bool {
	if o != nil && o.AccessKeyIds != nil {
		return true
	}

	return false
}

// SetAccessKeyIds gets a reference to the given []string and assigns it to the AccessKeyIds field.
func (o *FiltersAccessKeys) SetAccessKeyIds(v []string) {
	o.AccessKeyIds = &v
}

// GetStates returns the States field value if set, zero value otherwise.
func (o *FiltersAccessKeys) GetStates() []string {
	if o == nil || o.States == nil {
		var ret []string
		return ret
	}
	return *o.States
}

// GetStatesOk returns a tuple with the States field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersAccessKeys) GetStatesOk() (*[]string, bool) {
	if o == nil || o.States == nil {
		return nil, false
	}
	return o.States, true
}

// HasStates returns a boolean if a field has been set.
func (o *FiltersAccessKeys) HasStates() bool {
	if o != nil && o.States != nil {
		return true
	}

	return false
}

// SetStates gets a reference to the given []string and assigns it to the States field.
func (o *FiltersAccessKeys) SetStates(v []string) {
	o.States = &v
}

func (o FiltersAccessKeys) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessKeyIds != nil {
		toSerialize["AccessKeyIds"] = o.AccessKeyIds
	}
	if o.States != nil {
		toSerialize["States"] = o.States
	}
	return json.Marshal(toSerialize)
}

type NullableFiltersAccessKeys struct {
	value *FiltersAccessKeys
	isSet bool
}

func (v NullableFiltersAccessKeys) Get() *FiltersAccessKeys {
	return v.value
}

func (v *NullableFiltersAccessKeys) Set(val *FiltersAccessKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersAccessKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersAccessKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersAccessKeys(val *FiltersAccessKeys) *NullableFiltersAccessKeys {
	return &NullableFiltersAccessKeys{value: val, isSet: true}
}

func (v NullableFiltersAccessKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersAccessKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
